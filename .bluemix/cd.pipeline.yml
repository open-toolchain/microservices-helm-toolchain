---
properties:
- name: HELM_VERSION
  value: '2.12.3'
  type: text
- name: IBM_CLOUD_API_KEY
  value: ${API_KEY}
  type: secure
stages:
- name: BUILD
  inputs:
  - type: git
    branch: master
    service: ${GIT_REPO}
  triggers:
  - type: commit
  properties:
  jobs:
  - name: Build umbrella chart
    type: builder
    build_type: cr
    artifact_dir: output
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      #set -x
      cp -R -n ./ $ARCHIVE_DIR/ || true
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/fetch_git_creds.sh")
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/build_umbrella_chart.sh")
- name: STAGING
  inputs:
  - type: job
    stage: BUILD
    job: Build umbrella chart
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${STAGING_CLUSTER_NAMESPACE}
    type: text
  - name: CF_APP_NAME
    value: undefined
    type: text
  - name: APP_URL
    value: undefined
    type: text
  - name: SAUCE_USERNAME
    value: {{services.test.parameters.username}}
    type: text
  - name: SAUCE_ACCESS_KEY
    value: {{services.test.parameters.key}}
    type: text
  - name: LOGICAL_ENV_NAME
    value: STAGING
    type: text
  - name: HOST
    value: ondemand.saucelabs.com
    type: text
  - name: PORT
    value: '80'
    type: text
  - name: SERVICE_ID
    value: undefined
    type: text
  - name: POLICY_NAME_FORMAT
    value: ${POLICY_NAME_FORMAT}
    type: text
  jobs:
  - name: Staging gate
    type: tester
    script: |-
      #!/bin/bash
      #set -x
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_umbrella_gate.sh")
  - name: Config service
    type: deployer
    target:
      region_id: ${STAGING_REGION_ID}
      organization: ${STAGING_ORG_NAME}
      space: ${STAGING_SPACE_NAME}
      application: ${CF_APP_NAME}
      api_key: ${API_KEY}
    script: |
      #!/bin/bash
      SERVICE=$(cf services | grep myMicroservicesCloudant ||:)
      if [ ! -z "$SERVICE" ]; then
        PLAN=$(echo $SERVICE | awk '{print $3}')
        if [ $PLAN == "Shared" ]; then
          echo "Attempting to delete deprecated service (myMicroservicesCloudant:$PLAN)."
          echo "Note: This can fail if the service is still bound to apps or service keys."
          echo "      If so, please delete these apps or service keys explicitly first."
          cf delete-service myMicroservicesCloudant -f
          cf create-service cloudantNoSQLDB Lite myMicroservicesCloudant
        else
          echo "Keeping existing service (myMicroservicesCloudant:$PLAN)."
        fi
      else
        cf create-service cloudantNoSQLDB Lite myMicroservicesCloudant
      fi
      export SERVICE_ID=$( cf service myMicroservicesCloudant --guid | tail -n 1)
  - name: Config cluster
    type: deployer
    target:
      region_id: ${STAGING_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${STAGING_CLUSTER_NAME}
    script: |
      #!/bin/bash
      #set -x
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_predeploy_helm.sh")
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/cluster_bind_service.sh")
  - name: Deploy umbrella chart
    type: deployer
    target:
      region_id: ${STAGING_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${STAGING_CLUSTER_NAME}
    script: |
      #!/bin/bash
      #set -x
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/deploy_umbrella_chart.sh")
  - name: Sauce Labs Tests
    type: tester
    extension_id: ibm.devops.services.pipeline.saucelabs
    services:
      - ${SAUCE_LABS}
    target:
      region_id: ${STAGING_REGION_ID}
      organization: ${STAGING_ORG_NAME}
      space: ${STAGING_SPACE_NAME}
    DL_ASSETS: 'false'
    SELECT_CMD: custom
    COMMAND: |-
      #!/bin/bash
      # set -x
      if [ -f ./tests/run-tests.sh ]; then
        source ./tests/run-tests.sh
      else
        echo "Test runner script not found: ./tests/run-tests.sh"
      fi
    enable_tests: true
    test_file_pattern: '*.xml'
- name: PROD
  inputs:
  - type: job
    stage: BUILD
    job: Build umbrella chart
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text
  - name: CF_APP_NAME
    value: undefined
    type: text
  - name: APP_URL
    value: undefined
    type: text
  - name: LOGICAL_ENV_NAME
    value: PROD
    type: text
  - name: SERVICE_ID
    value: undefined
    type: text
  - name: POLICY_NAME_FORMAT
    value: ${POLICY_NAME_FORMAT}
    type: text    
  jobs:
  - name: Production gate
    type: tester
    script: |-
      #!/bin/bash
      #set -x
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_umbrella_gate.sh")
  - name: Config service
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
      api_key: ${API_KEY}
    script: |
      #!/bin/bash
      SERVICE=$(cf services | grep myMicroservicesCloudant ||:)
      if [ ! -z "$SERVICE" ]; then
        PLAN=$(echo $SERVICE | awk '{print $3}')
        if [ $PLAN == "Shared" ]; then
          echo "Attempting to delete deprecated service (myMicroservicesCloudant:$PLAN)."
          echo "Note: This can fail if the service is still bound to apps or service keys."
          echo "      If so, please delete these apps or service keys explicitly first."
          cf delete-service myMicroservicesCloudant -f
          cf create-service cloudantNoSQLDB Lite myMicroservicesCloudant
        else
          echo "Keeping existing service (myMicroservicesCloudant:$PLAN)."
        fi
      else
        cf create-service cloudantNoSQLDB Lite myMicroservicesCloudant
      fi
      export SERVICE_ID=$( cf service myMicroservicesCloudant --guid | tail -n 1)
  - name: Config cluster
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      #set -x
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_predeploy_helm.sh")
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/cluster_bind_service.sh")
  - name: Deploy umbrella chart
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      #set -x
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/deploy_umbrella_chart.sh")
